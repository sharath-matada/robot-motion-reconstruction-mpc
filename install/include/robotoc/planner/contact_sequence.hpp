#ifndef ROBOTOC_CONTACT_SEQUENCE_HPP_
#define ROBOTOC_CONTACT_SEQUENCE_HPP_ 

#include <deque>
#include <iostream>
#include <memory>
#include <cassert>

#include "robotoc/robot/robot.hpp"
#include "robotoc/robot/se3.hpp"
#include "robotoc/utils/aligned_vector.hpp"
#include "robotoc/robot/contact_status.hpp"
#include "robotoc/robot/impact_status.hpp"
#include "robotoc/planner/discrete_event.hpp"


namespace robotoc {

///
/// @class ContactSequence
/// @brief The sequence of contact status and discrete events (impact and lift). 
///
class ContactSequence {
public:
  ///
  /// @brief Constructor. 
  /// @param[in] robot Robot model. 
  /// @param[in] reserved_num_discrete_events Reserved number of each discrete 
  /// events (impact and lift) to avoid dynamic memory allocation. Must be 
  /// non-negative. Default is 0.
  ///
  ContactSequence(const Robot& robot, const int reserved_num_discrete_events=0);

  ///
  /// @brief Default constructor. 
  ///
  ContactSequence();

  ///
  /// @brief Default destructor. 
  ///
  ~ContactSequence() = default;

  ///
  /// @brief Default copy constructor. 
  ///
  ContactSequence(const ContactSequence&) = default;

  ///
  /// @brief Default copy assign operator. 
  ///
  ContactSequence& operator=(const ContactSequence&) = default;

  ///
  /// @brief Default move constructor. 
  ///
  ContactSequence(ContactSequence&&) noexcept = default;

  ///
  /// @brief Default move assign operator. 
  ///
  ContactSequence& operator=(ContactSequence&&) noexcept = default;

  ///
  /// @brief Sets the contact status over all of the time stages uniformly. Also, 
  /// disable discrete events over all of the time stages.
  /// @param[in] contact_status Contact status.
  ///
  void init(const ContactStatus& contact_status);

  ///
  /// @brief Push back the discrete event. Contact status after discrete event 
  /// is also appended according to discrete_event. 
  /// @param[in] discrete_event Discrete event.
  /// @param[in] event_time Time of the discrete event.
  /// @param[in] sto if true, the switching time optimization (STO) is enabled
  /// for this discrete event. if false, it is disabled. Default is false.
  /// @note If event_time is larger than the terminal time of the optimal 
  /// control problem (t+T), then the discrete event and the contact status
  /// after the discrete event is not considered in the optimization problem.
  ///
  void push_back(const DiscreteEvent& discrete_event, const double event_time,
                 const bool sto=false);

  ///
  /// @brief Push back the contact sequence. A discrete event is automatically 
  /// generated by last contact status of this contact sequence and input 
  /// contact_status.
  /// @param[in] contact_status Contact status.
  /// @param[in] switching_time Time of the switch of the last contact status of 
  /// this contact sequence and the input contact status. 
  /// @param[in] sto if true, the switching time optimization (STO) is enabled
  /// for this discrete event. if false, it is disabled. Default is false.
  /// @note If switching_time is larger than the terminal time of the optimal 
  /// control problem (t+T), then the discrete event and the contact status
  /// after the discrete event is not considered in the optimization problem.
  ///
  void push_back(const ContactStatus& contact_status, 
                 const double switching_time, const bool sto=false);

  ///
  /// @brief Pop back the discrete event. Contact status after discrete event 
  /// is also removed. 
  ///
  void pop_back();

  ///
  /// @brief Pop front the discrete event. Contact status before the front 
  /// discrete event is also removed. 
  ///
  void pop_front();

  ///
  /// @brief Sets the time of the impact event. 
  /// @param[in] impact_index Index of the impact event. Must be non-negative
  /// and less than numImpactEvents().
  /// @param[in] impact_time Impact time.
  ///
  void setImpactTime(const int impact_index, const double impact_time);

  ///
  /// @brief Sets the time of the lift event. 
  /// @param[in] lift_index Index of the lift event. Must be non-negative
  /// and less than numLiftEvents().
  /// @param[in] lift_time Lift time.
  ///
  void setLiftTime(const int lift_index, const double lift_time);

  ///
  /// @brief Checks wheather the STO is enabled for the specified impact event. 
  /// @param[in] impact_index Index of the impact of interest. 
  /// @return true if the STO is enabled. false if not.
  ///
  bool isSTOEnabledImpact(const int impact_index) const;

  ///
  /// @brief Checks wheather the STO is enabled for the specified lift event. 
  /// @param[in] lift_index Index of the lift of interest. 
  /// @return true if the STO is enabled. false if not.
  ///
  bool isSTOEnabledLift(const int lift_index) const;

  ///
  /// @brief Checks wheather the event times are consistent. 
  /// @return true if there is no problem. false if not.
  /// 
  bool isEventTimeConsistent() const;

  ///
  /// @brief Sets the contact placements (positions and rotations) to contact 
  /// statsus with specified contact phase. The rotations are set to 
  /// Eigen::Matrix3d::Identity(). Also sets the contact placement of 
  /// the discrete event just before the contact phase.
  /// @param[in] contact_phase Contact phase.
  /// @param[in] contact_positions Contact positions.
  ///
  void setContactPlacements(
      const int contact_phase, 
      const std::vector<Eigen::Vector3d>& contact_positions);

  ///
  /// @brief Sets the contact placements (positions and rotations) to contact 
  /// statsus with specified contact phase. Also set the contact placement of 
  /// the discrete event just before the contact phase.
  /// @param[in] contact_phase Contact phase.
  /// @param[in] contact_positions Contact positions.
  /// @param[in] contact_rotations Contact rotations.
  ///
  void setContactPlacements(
      const int contact_phase, 
      const std::vector<Eigen::Vector3d>& contact_positions,
      const std::vector<Eigen::Matrix3d>& contact_rotations);

  ///
  /// @brief Sets the contact placements (positions and rotations) to contact 
  /// statsus with specified contact phase. Also set the contact placement of 
  /// the discrete event just before the contact phase.
  /// @param[in] contact_phase Contact phase.
  /// @param[in] contact_placements Contact placements.
  ///
  void setContactPlacements(const int contact_phase, 
                            const aligned_vector<SE3>& contact_placements);

  ///
  /// @brief Sets the friction coefficients. Also sets the friction coefficients 
  /// of the discrete event just before the contact phase.
  /// @param[in] contact_phase Contact phase.
  /// @param[in] friction_coefficients Friction coefficients.
  ///
  void setFrictionCoefficients(const int contact_phase, 
                               const std::vector<double>& friction_coefficients);

  ///
  /// @brief Returns number of contact phases. 
  /// @return Number of contact phases.
  ///
  int numContactPhases() const {
    return contact_statuses_.size();
  }

  ///
  /// @brief Returns number of discrete events, i.e., sum of 
  /// numImpactEvents() and numLiftEvents().
  /// @return Number of discrete events.
  ///
  int numDiscreteEvents() const {
    return (numContactPhases()-1);
  }

  ///
  /// @brief Returns number of impact events. 
  /// @return Number of impact events.
  ///
  int numImpactEvents() const {
    return impact_events_.size();
  }

  ///
  /// @brief Returns number of lift events. 
  /// @return Number of lift events.
  ///
  int numLiftEvents() const {
    return (numDiscreteEvents()-numImpactEvents());
  }

  ///
  /// @brief Gets the contact status. 
  /// @param[in] contact_phase Index of contact status phase.
  /// @return const reference to the contact status.
  ///
  const ContactStatus& contactStatus(const int contact_phase) const {
    assert(contact_phase >= 0);
    assert(contact_phase < numContactPhases());
    return contact_statuses_[contact_phase];
  }

  ///
  /// @brief Gets the impact status. 
  /// @param[in] impact_index Index of impact event.
  /// @return const reference to the impact status.
  ///
  const ImpactStatus& impactStatus(const int impact_index) const {
    assert(impact_index >= 0);
    assert(impact_index < numImpactEvents());
    return impact_events_[impact_index].impactStatus();
  }

  ///
  /// @brief Returns impact event time. 
  /// @return Impact event time.
  ///
  double impactTime(const int impact_index) const {
    assert(impact_index >= 0);
    assert(impact_index < numImpactEvents());
    return impact_time_[impact_index];
  }

  ///
  /// @brief Returns lift event time. 
  /// @return Lift event time.
  ///
  double liftTime(const int lift_index) const {
    assert(lift_index >= 0);
    assert(lift_index < numLiftEvents());
    return lift_time_[lift_index];
  }

  ///
  /// @brief Returns the event type of the specified discrete event. 
  /// @param[in] event_index Index of the discrete event. Must be less than
  /// ContactSequence::numDiscreteEvents().
  /// @return The event type of the specified discrete event.
  ///
  DiscreteEventType eventType(const int event_index) const {
    assert(event_index >= 0);
    assert(event_index < numImpactEvents()+numLiftEvents());
    if (is_impact_event_[event_index]) return DiscreteEventType::Impact;
    else return DiscreteEventType::Lift;
  }

  ///
  /// @brief Returns the event times of each event. 
  /// @return const reference to the event times.
  ///
  const std::deque<double>& eventTimes() const {
    return event_time_;
  }

  ///
  /// @brief Reserves each discrete events (impact and lift) to avoid dynamic 
  /// memory allocation.
  /// @param[in] reserved_num_discrete_events The reserved size.
  ///
  void reserve(const int reserved_num_discrete_events);

  ///
  /// @brief Returns reserved size of container of each discrete events.
  ///
  int reservedNumDiscreteEvents() const;

  ///
  /// @brief Displays the contact sequence onto a ostream.
  ///
  void disp(std::ostream& os) const;

  friend std::ostream& operator<<(std::ostream& os, 
                                  const ContactSequence& contact_sequence);

  friend std::ostream& operator<<(
      std::ostream& os, 
      const std::shared_ptr<ContactSequence>& contact_sequence);

private:
  int reserved_num_discrete_events_;
  ContactStatus default_contact_status_;
  std::deque<ContactStatus> contact_statuses_;
  std::deque<DiscreteEvent> impact_events_;
  std::deque<int> event_index_impact_, event_index_lift_;
  std::deque<double> event_time_, impact_time_, lift_time_;
  std::deque<bool> is_impact_event_, sto_impact_, sto_lift_;

  void clear();
};
 
} // namespace robotoc 

#endif // ROBOTOC_CONTACT_SEQUENCE_HPP_ 